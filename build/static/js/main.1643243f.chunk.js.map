{"version":3,"sources":["Board/Board.js","App.js","index.js"],"names":["boardSize","snake","food","adder","count","Board","useState","start","setStart","Array","fill","map","row","board","setBoard","sectionCard","setSectionCard","score","setScore","handleRestart","randomCell","min","max","Math","ceil","random","find","snakeCell","setDirection","direction","useEffect","window","addEventListener","event","key","frame","setInterval","len","length","i","temp","createCell","j","clearInterval","removeEventListener","Fragment","id","className","onClick","rowValue","rowIndex","cellValue","cellIndex","App","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.1643243f.chunk.js","sourcesContent":["import React, {useState, useEffect} from 'react';\r\nimport './Board.css';\r\n\r\nconst boardSize = [15, 15];\r\nconst refreshTime = 175;\r\nvar snake = [[5, 5]];\r\nvar food = [2,2];\r\nvar adder = [0, 1];\r\nvar count = 0;\r\n\r\nconst Board = () => {\r\n    //React variables\r\n    var [start, setStart] = useState(false);\r\n    var [board, setBoard] = useState(new Array(boardSize[0]).fill(0).map(row => new Array(15).fill(boardSize[0])));\r\n    var [sectionCard, setSectionCard] = useState(false);\r\n    var [score, setScore] = useState(0);\r\n\r\n    // Function\r\n    // Handling restart request\r\n    const handleRestart = () => {\r\n        count = 0;\r\n        setStart(!start);\r\n        setScore(0);\r\n        setSectionCard(false);\r\n    }\r\n\r\n    // Changind cell state to empty, snake and food\r\n    const createCell = (snake) => {\r\n        var temp = new Array(15).fill(boardSize[0]).map(row => new Array(boardSize[0]).fill(0));\r\n        temp[food[0]][food[1]] = 2;\r\n        for(var i = 0; i < snake.length; i++){\r\n            temp[snake[i][0]][snake[i][1]] = 1;\r\n        }\r\n        setBoard(temp);\r\n    }\r\n\r\n    // Creating random food cell\r\n    const randomCell = (food, snake, min, max) => {\r\n        do{\r\n            food[0] = Math.ceil(Math.random()*(max-1));\r\n            food[1] = Math.ceil(Math.random()*(min-1));\r\n        }while(snake.find(snakeCell => snakeCell[0] === food[0] && snakeCell[1] === food[1]))\r\n    }\r\n    \r\n    // Setting adder value by using if-else block\r\n    const setDirection = (direction) => {\r\n        if (direction === 'ArrowUp'){\r\n            adder = [-1, 0];\r\n        }\r\n        else if (direction === 'ArrowDown'){\r\n            adder = [1, 0];\r\n        }\r\n        else if (direction === 'ArrowLeft'){\r\n            adder = [0, -1];\r\n        }\r\n        else if (direction === 'ArrowRight'){\r\n            adder = [0, 1];\r\n        }\r\n    }\r\n\r\n    // Game logic \r\n    useEffect(()=>{\r\n\r\n        // Reset values\r\n        snake = [[5, 5]];\r\n        food = [2,2];\r\n        adder = [0, 1];\r\n\r\n        window.addEventListener('keydown', (event)=>setDirection(event.key));\r\n\r\n        const frame = setInterval(() => {\r\n            var len = snake.length;\r\n            for(var i = len-1; i > 0 ; i--){\r\n                snake[i] = snake[i-1];\r\n            }\r\n            snake[0] = [snake[0][0]+adder[0], snake[0][1]+adder[1]];\r\n\r\n            if(! (snake[0][0] === -1 || snake[0][1] === -1 || snake[0][0] === boardSize[0] || snake[0][1] === boardSize[1] )){\r\n                createCell(snake);\r\n                for(var j = 1; j < len; j++){\r\n                    if(snake[0][0] === snake[j][0] && snake[0][1] === snake[j][1]){\r\n                        clearInterval(frame);\r\n                        setSectionCard(true);\r\n                    }\r\n                }\r\n            }else{\r\n                clearInterval(frame);\r\n                setSectionCard(true);\r\n            }\r\n            if(snake[0][0] === food[0] &&  snake[0][1] === food[1]){\r\n                setScore(++count);\r\n                randomCell(food, snake, ...boardSize);\r\n                snake = [...snake, [snake[len-1][0]-adder[0],snake[len-1][1]-adder[1]]]\r\n            }\r\n        }, refreshTime);\r\n\r\n        return () =>{\r\n            clearInterval(frame);\r\n            window.removeEventListener(\"keydown\", setDirection);\r\n        }\r\n\r\n    },[start])\r\n\r\n    return(\r\n        <React.Fragment>\r\n        {/* Section card */}\r\n        {sectionCard && \r\n            <div id=\"message\">\r\n                <div id=\"card\">\r\n                    <h1 className=\"card-heading\">Score</h1>\r\n                    <h2 className=\"card-value\">{score}</h2>\r\n                    <div className=\"restart button-space\" onClick={handleRestart}></div>\r\n                </div>\r\n            </div>\r\n        }\r\n        {/* Display container */}\r\n        <div id=\"display\">\r\n            <div id=\"score\">\r\n                <div id=\"apple-image\"></div>\r\n                <h3>{score}</h3>\r\n            </div>\r\n            <div className=\"restart\" onClick={handleRestart}></div>\r\n        </div>\r\n\r\n        {/* Board */}\r\n        <div id=\"board\">\r\n            {\r\n                board.map((rowValue, rowIndex) =>{\r\n                    return(<div key={rowIndex} className=\"row\">\r\n                        {rowValue.map((cellValue, cellIndex)=>{\r\n                            return(<div key={cellIndex} className={`cell ${cellValue === 1 ? 'snake': cellValue === 2 ? 'food':''}`} ></div>)\r\n                        })}\r\n                    </div>)\r\n                })\r\n            }\r\n        </div>\r\n        {/* Controller */}\r\n        <div id=\"controller\">\r\n                <div id=\"ArrowLeft\" className=\"direction-button\" onClick={()=>setDirection(\"ArrowLeft\")}></div>\r\n                <div id=\"ArrowUp\" className=\"direction-button\" onClick={()=>setDirection(\"ArrowUp\")}></div>\r\n                <div id=\"ArrowDown\" className=\"direction-button\" onClick={()=>setDirection(\"ArrowDown\")}></div>\r\n                <div id=\"ArrowRight\" className=\"direction-button\" onClick={()=>setDirection(\"ArrowRight\")}></div>\r\n        </div>\r\n        {/* Info */}\r\n        <div id=\"info\">\r\n            Controll movement by keyboard or virtual arrrows.\r\n        </div>\r\n        </React.Fragment>\r\n    );\r\n}\r\n\r\nexport default Board;","import React from 'react';\nimport Board from './Board/Board';\nimport './App.css';\n\nfunction App() {\n  return (\n    <div id=\"board-container\">\n      <Board />\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}